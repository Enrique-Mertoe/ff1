import { Component } from "@angular/core";
import { EmbeddedViewContentComponent } from "./embedded-view-content.component";
import * as i0 from "@angular/core";
export class BaseAngular extends EmbeddedViewContentComponent {
    constructor(changeDetectorRef, viewContainerRef) {
        super(viewContainerRef);
        this.changeDetectorRef = changeDetectorRef;
        this.isModelSubsribed = false;
        this.isDestroyed = false;
    }
    get surveyModel() {
        return this.getModel().getSurvey();
    }
    ngDoCheck() {
        if (this.previousModel !== this.getModel()) {
            this.unMakeBaseElementAngular(this.previousModel);
            this.makeBaseElementAngular(this.getModel());
            this.onModelChanged();
            this.previousModel = this.getModel();
        }
        this.setIsRendering(true);
    }
    onModelChanged() { }
    setIsRendering(val) {
        const model = this.getModel();
        if (!!model) {
            model.isRendering = val;
        }
    }
    getIsRendering() {
        const model = this.getModel();
        return !!model && !!model.isRendering;
    }
    ngOnDestroy() {
        this.isDestroyed = true;
        this.unMakeBaseElementAngular(this.getModel());
        this.previousModel = undefined;
    }
    isBaseElementSubsribed(stateElement) {
        return !!stateElement.__ngImplemented;
    }
    getBaseElementCallbacks(stateElement) {
        var _a;
        stateElement.__ngSubscribers = (_a = stateElement.__ngSubscribers) !== null && _a !== void 0 ? _a : [];
        return (stateElement.__ngSubscribers);
    }
    makeBaseElementAngular(stateElement) {
        this.makeBaseElementAngularCallback = () => {
            this.isModelSubsribed = true;
            stateElement.__ngImplemented = true;
            stateElement.iteratePropertiesHash((hash, key) => {
                var val = hash[key];
                if (Array.isArray(val)) {
                    var val = val;
                    val["onArrayChanged"] = (arrayChanges) => {
                        this.update(key);
                    };
                }
            });
            stateElement.setPropertyValueCoreHandler = (hash, key, val) => {
                if (hash[key] !== val) {
                    hash[key] = val;
                    this.update(key);
                }
            };
            stateElement.enableOnElementRerenderedEvent();
        };
        if (!!stateElement) {
            if (!stateElement.__ngImplemented) {
                this.makeBaseElementAngularCallback();
            }
            else {
                this.getBaseElementCallbacks(stateElement).push(this.makeBaseElementAngularCallback);
            }
        }
    }
    unMakeBaseElementAngular(stateElement) {
        if (!!stateElement) {
            if (this.isModelSubsribed) {
                this.isModelSubsribed = false;
                stateElement.__ngImplemented = false;
                stateElement.setPropertyValueCoreHandler = undefined;
                stateElement.iteratePropertiesHash((hash, key) => {
                    var val = hash[key];
                    if (Array.isArray(val)) {
                        var val = val;
                        val["onArrayChanged"] = () => { };
                    }
                });
                stateElement.disableOnElementRerenderedEvent();
                const callbacks = this.getBaseElementCallbacks(stateElement);
                const callback = callbacks.shift();
                callback && callback();
            }
            else if (this.makeBaseElementAngularCallback) {
                const callbacks = this.getBaseElementCallbacks(stateElement);
                const index = callbacks.indexOf(this.makeBaseElementAngularCallback);
                if (index > -1) {
                    callbacks.splice(index, 1);
                }
            }
        }
    }
    update(key) {
        if (this.getIsRendering())
            return;
        this.beforeUpdate();
        if (key && this.getPropertiesToUpdateSync().indexOf(key) > -1) {
            this.detectChanges();
            this.afterUpdate(true);
        }
        else {
            queueMicrotask(() => {
                if (!this.isDestroyed) {
                    this.setIsRendering(true);
                    this.detectChanges();
                    this.afterUpdate();
                }
            });
        }
    }
    getChangeDetectorRef() {
        return this.embeddedView ? this.embeddedView : this.changeDetectorRef;
    }
    getPropertiesToUpdateSync() {
        return [];
    }
    detectChanges() {
        this.getChangeDetectorRef().detectChanges();
    }
    getShouldReattachChangeDetector() {
        return true;
    }
    beforeUpdate() {
        this.setIsRendering(true);
    }
    afterUpdate(isSync = false) {
        this.setIsRendering(false);
        const model = this.getModel();
        if (model && !this.isDestroyed) {
            model.afterRerender();
        }
    }
    ngAfterViewChecked() {
        this.setIsRendering(false);
    }
}
BaseAngular.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: BaseAngular, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Component });
BaseAngular.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: BaseAngular, selector: "ng-component", usesInheritance: true, ngImport: i0, template: "", isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: BaseAngular, decorators: [{
            type: Component,
            args: [{
                    template: ""
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ViewContainerRef }]; } });
//# sourceMappingURL=data:application/json;base64,