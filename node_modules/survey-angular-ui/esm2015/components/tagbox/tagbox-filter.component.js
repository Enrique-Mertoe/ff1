import { Component, Input } from "@angular/core";
import { BaseAngular } from "../../base-angular";
import { AngularComponentFactory } from "../../component-factory";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/forms";
export class TagboxFilterComponent extends BaseAngular {
    getModel() {
        return this.model;
    }
}
TagboxFilterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TagboxFilterComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
TagboxFilterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TagboxFilterComponent, selector: "sv-tagbox-filter", inputs: { model: "model", question: "question" }, usesInheritance: true, ngImport: i0, template: "<ng-template #template>\n  <div [class]=\"question.cssClasses.hint\">\n    <div *ngIf=\"model.showHintPrefix\" [class]=\"question.cssClasses.hintPrefix\">\n      <span>{{ model.hintStringPrefix }}</span>\n    </div>\n    <div [class]=\"question.cssClasses.hintSuffixWrapper\">\n      <div *ngIf=\"model.showHintString\" [class]=\"question.cssClasses.hintSuffix\">\n        <span style=\"visibility: hidden\">{{ model.inputStringRendered }}</span>\n        <span>{{ model.hintStringSuffix }}</span>\n      </div>\n      <input type=\"text\" autocomplete=\"off\" [(ngModel)]=\"model.inputStringRendered\" [attr.id]=\"question.getInputId()\"\n        [class]=\"question.cssClasses.filterStringInput\" [attr.inputmode]=\"model.inputMode\"\n        [attr.readonly]=\"model.filterReadOnly ? true : null\" [attr.disabled]=\"question.isDisabledAttr ? true : null\"\n        [attr.size]=\"!model.inputStringRendered ? 1 : null\" [attr.role]=\"model.ariaInputRole\"\n        [attr.aria-required]=\"model.ariaInputRequired\" [attr.aria-invalid]=\"model.ariaInputInvalid\"\n        [attr.aria-errormessage]=\"model.ariaInputErrorMessage\" [attr.aria-expanded]=\"model.ariaInputExpanded\"\n        [attr.aria-label]=\"model.ariaInputLabel\" [attr.aria-labelledby]=\"model.ariaInputLabelledby\"\n        [attr.aria-describedby]=\"model.ariaInputDescribedby\" [attr.aria-controls]=\"model.ariaInputControls\"\n        [attr.aria-activedescendant]=\"model.ariaInputActivedescendant\"\n        [attr.placeholder]=\"model.filterStringPlaceholder\" (keydown)=\"model.inputKeyHandler($event)\"\n        (blur)=\"question.onBlur($event)\" (focus)=\"question.onFocus($event)\" />\n    </div>\n  </div>\n</ng-template>", styles: [":host{display:none}\n"], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TagboxFilterComponent, decorators: [{
            type: Component,
            args: [{
                    selector: "sv-tagbox-filter",
                    templateUrl: "./tagbox-filter.component.html",
                    styleUrls: ["../../hide-host.scss"]
                }]
        }], propDecorators: { model: [{
                type: Input
            }], question: [{
                type: Input
            }] } });
AngularComponentFactory.Instance.registerComponent("sv-tagbox-filter", TagboxFilterComponent);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFnYm94LWZpbHRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy90YWdib3gvdGFnYm94LWZpbHRlci5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy90YWdib3gvdGFnYm94LWZpbHRlci5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVqRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDakQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0seUJBQXlCLENBQUM7Ozs7QUFPbEUsTUFBTSxPQUFPLHFCQUFzQixTQUFRLFdBQVc7SUFJcEQsUUFBUTtRQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDOzttSEFOVSxxQkFBcUI7dUdBQXJCLHFCQUFxQixpSUNWbEMsaXFEQXVCYzs0RkRiRCxxQkFBcUI7a0JBTGpDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjtvQkFDNUIsV0FBVyxFQUFFLGdDQUFnQztvQkFDN0MsU0FBUyxFQUFFLENBQUMsc0JBQXNCLENBQUM7aUJBQ3BDOzhCQUVVLEtBQUs7c0JBQWIsS0FBSztnQkFDRyxRQUFRO3NCQUFoQixLQUFLOztBQU9SLHVCQUF1QixDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxrQkFBa0IsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBEcm9wZG93bk11bHRpU2VsZWN0TGlzdE1vZGVsLCBRdWVzdGlvblRhZ2JveE1vZGVsIH0gZnJvbSBcInN1cnZleS1jb3JlXCI7XG5pbXBvcnQgeyBCYXNlQW5ndWxhciB9IGZyb20gXCIuLi8uLi9iYXNlLWFuZ3VsYXJcIjtcbmltcG9ydCB7IEFuZ3VsYXJDb21wb25lbnRGYWN0b3J5IH0gZnJvbSBcIi4uLy4uL2NvbXBvbmVudC1mYWN0b3J5XCI7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogXCJzdi10YWdib3gtZmlsdGVyXCIsXG4gIHRlbXBsYXRlVXJsOiBcIi4vdGFnYm94LWZpbHRlci5jb21wb25lbnQuaHRtbFwiLFxuICBzdHlsZVVybHM6IFtcIi4uLy4uL2hpZGUtaG9zdC5zY3NzXCJdXG59KVxuZXhwb3J0IGNsYXNzIFRhZ2JveEZpbHRlckNvbXBvbmVudCBleHRlbmRzIEJhc2VBbmd1bGFyIHtcbiAgQElucHV0KCkgbW9kZWwhOiBEcm9wZG93bk11bHRpU2VsZWN0TGlzdE1vZGVsO1xuICBASW5wdXQoKSBxdWVzdGlvbiE6IFF1ZXN0aW9uVGFnYm94TW9kZWw7XG5cbiAgZ2V0TW9kZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMubW9kZWw7XG4gIH1cbn1cblxuQW5ndWxhckNvbXBvbmVudEZhY3RvcnkuSW5zdGFuY2UucmVnaXN0ZXJDb21wb25lbnQoXCJzdi10YWdib3gtZmlsdGVyXCIsIFRhZ2JveEZpbHRlckNvbXBvbmVudCk7IiwiPG5nLXRlbXBsYXRlICN0ZW1wbGF0ZT5cbiAgPGRpdiBbY2xhc3NdPVwicXVlc3Rpb24uY3NzQ2xhc3Nlcy5oaW50XCI+XG4gICAgPGRpdiAqbmdJZj1cIm1vZGVsLnNob3dIaW50UHJlZml4XCIgW2NsYXNzXT1cInF1ZXN0aW9uLmNzc0NsYXNzZXMuaGludFByZWZpeFwiPlxuICAgICAgPHNwYW4+e3sgbW9kZWwuaGludFN0cmluZ1ByZWZpeCB9fTwvc3Bhbj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IFtjbGFzc109XCJxdWVzdGlvbi5jc3NDbGFzc2VzLmhpbnRTdWZmaXhXcmFwcGVyXCI+XG4gICAgICA8ZGl2ICpuZ0lmPVwibW9kZWwuc2hvd0hpbnRTdHJpbmdcIiBbY2xhc3NdPVwicXVlc3Rpb24uY3NzQ2xhc3Nlcy5oaW50U3VmZml4XCI+XG4gICAgICAgIDxzcGFuIHN0eWxlPVwidmlzaWJpbGl0eTogaGlkZGVuXCI+e3sgbW9kZWwuaW5wdXRTdHJpbmdSZW5kZXJlZCB9fTwvc3Bhbj5cbiAgICAgICAgPHNwYW4+e3sgbW9kZWwuaGludFN0cmluZ1N1ZmZpeCB9fTwvc3Bhbj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgYXV0b2NvbXBsZXRlPVwib2ZmXCIgWyhuZ01vZGVsKV09XCJtb2RlbC5pbnB1dFN0cmluZ1JlbmRlcmVkXCIgW2F0dHIuaWRdPVwicXVlc3Rpb24uZ2V0SW5wdXRJZCgpXCJcbiAgICAgICAgW2NsYXNzXT1cInF1ZXN0aW9uLmNzc0NsYXNzZXMuZmlsdGVyU3RyaW5nSW5wdXRcIiBbYXR0ci5pbnB1dG1vZGVdPVwibW9kZWwuaW5wdXRNb2RlXCJcbiAgICAgICAgW2F0dHIucmVhZG9ubHldPVwibW9kZWwuZmlsdGVyUmVhZE9ubHkgPyB0cnVlIDogbnVsbFwiIFthdHRyLmRpc2FibGVkXT1cInF1ZXN0aW9uLmlzRGlzYWJsZWRBdHRyID8gdHJ1ZSA6IG51bGxcIlxuICAgICAgICBbYXR0ci5zaXplXT1cIiFtb2RlbC5pbnB1dFN0cmluZ1JlbmRlcmVkID8gMSA6IG51bGxcIiBbYXR0ci5yb2xlXT1cIm1vZGVsLmFyaWFJbnB1dFJvbGVcIlxuICAgICAgICBbYXR0ci5hcmlhLXJlcXVpcmVkXT1cIm1vZGVsLmFyaWFJbnB1dFJlcXVpcmVkXCIgW2F0dHIuYXJpYS1pbnZhbGlkXT1cIm1vZGVsLmFyaWFJbnB1dEludmFsaWRcIlxuICAgICAgICBbYXR0ci5hcmlhLWVycm9ybWVzc2FnZV09XCJtb2RlbC5hcmlhSW5wdXRFcnJvck1lc3NhZ2VcIiBbYXR0ci5hcmlhLWV4cGFuZGVkXT1cIm1vZGVsLmFyaWFJbnB1dEV4cGFuZGVkXCJcbiAgICAgICAgW2F0dHIuYXJpYS1sYWJlbF09XCJtb2RlbC5hcmlhSW5wdXRMYWJlbFwiIFthdHRyLmFyaWEtbGFiZWxsZWRieV09XCJtb2RlbC5hcmlhSW5wdXRMYWJlbGxlZGJ5XCJcbiAgICAgICAgW2F0dHIuYXJpYS1kZXNjcmliZWRieV09XCJtb2RlbC5hcmlhSW5wdXREZXNjcmliZWRieVwiIFthdHRyLmFyaWEtY29udHJvbHNdPVwibW9kZWwuYXJpYUlucHV0Q29udHJvbHNcIlxuICAgICAgICBbYXR0ci5hcmlhLWFjdGl2ZWRlc2NlbmRhbnRdPVwibW9kZWwuYXJpYUlucHV0QWN0aXZlZGVzY2VuZGFudFwiXG4gICAgICAgIFthdHRyLnBsYWNlaG9sZGVyXT1cIm1vZGVsLmZpbHRlclN0cmluZ1BsYWNlaG9sZGVyXCIgKGtleWRvd24pPVwibW9kZWwuaW5wdXRLZXlIYW5kbGVyKCRldmVudClcIlxuICAgICAgICAoYmx1cik9XCJxdWVzdGlvbi5vbkJsdXIoJGV2ZW50KVwiIChmb2N1cyk9XCJxdWVzdGlvbi5vbkZvY3VzKCRldmVudClcIiAvPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvbmctdGVtcGxhdGU+Il19