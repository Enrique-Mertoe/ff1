import { Component, ViewChild } from "@angular/core";
import { QuestionAngular } from "../question";
import { AngularComponentFactory } from "../component-factory";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../utils/dynamic.directive";
export class SliderQuestionComponent extends QuestionAngular {
    ngAfterViewInit() {
        super.ngAfterViewInit();
        if (this.model && this.rangeInputElement) {
            this.model.refreshInputRange(this.rangeInputElement);
        }
    }
    get rootRef() {
        var _a;
        return (_a = this.elementContentRef) === null || _a === void 0 ? void 0 : _a.nativeElement;
    }
    get rangeInputElement() {
        var _a;
        return (_a = this.rangeInputRef) === null || _a === void 0 ? void 0 : _a.nativeElement;
    }
    get labelCountArray() {
        const result = [];
        for (let i = 0; i < this.model.renderedLabelCount; i++) {
            result.push(i);
        }
        return result;
    }
    get valueArray() {
        return this.model.renderedValue;
    }
    trackByRenderedValue(i) {
        return i;
    }
    trackByLabelCount(i, label) {
        return label.id;
    }
}
SliderQuestionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: SliderQuestionComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
SliderQuestionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: SliderQuestionComponent, selector: "sv-ng-slider-question", viewQueries: [{ propertyName: "rangeInputRef", first: true, predicate: ["rangeInputRef"], descendants: true }], usesInheritance: true, ngImport: i0, template: "\n<div [class]=\"model.rootCss\" #contentElement>\n  <input *ngIf=\"model.sliderType !== 'single' && model.allowDragRange\" #rangeInputRef\n  name=\"range-input\" [class]=\"model.cssClasses.input\" type=\"range\" tabIndex=\"-1\"\n  id=\"sjs-slider-input-range-input\"\n  [attr.min]=\"model.min\" [attr.max]=\"model.max\" [attr.step]=\"model.step\" aria-hidden=\"true\"\n  (input)=\"model.handleRangeOnChange($any($event))\"\n  (pointerdown)=\"model.handleRangePointerDown($any($event), rootRef)\"\n  (pointerup)=\"model.handleRangePointerUp($any($event), rangeInputRef)\" />\n  \n  <div [class]=\"model.cssClasses.visualContainer\" (pointerup)=\"model.setValueByClickOnPath($any($event), rootRef)\">\n    <div [class]=\"model.cssClasses.visualContainerSlider\">\n      <div [class]=\"model.cssClasses.inverseTrackLeft\" [style]=\"{ width: model.getTrackPercentLeft() + '%' }\"></div>\n      <div [class]=\"model.cssClasses.inverseTrackRight\" [style]=\"{ width: model.getTrackPercentRight() + '%' }\"></div>\n      <div [class]=\"model.cssClasses.rangeTrack\" [style]=\"{ left: model.getTrackPercentLeft() + '%', right: model.getTrackPercentRight() + '%' }\" ></div>\n\n       <ng-container *ngFor=\"let value of valueArray; index as i; trackBy: trackByRenderedValue;\">\n        <input [class]=\"model.cssClasses.input\" [attr.id]=\"'sjs-slider-input-' + i\" type=\"range\" [value]=\"value\" \n          [attr.min]=\"model.min\" [attr.max]=\"model.max\" [attr.step]=\"model.step\" [disabled]=\"model.isDisabledAttr\"\n          (input)=\"model.handleOnChange($any($event), i)\"\n          (pointerdown)=\"model.handlePointerDown($any($event))\"\n          (pointerup)=\"model.handlePointerUp($any($event))\"\n          (keydown)=\"model.handleKeyDown($any($event))\"\n          (keyup)=\"model.handleKeyUp($any($event))\"\n          (focus)=\"model.handleOnFocus(i)\"\n          (blur)=\"model.handleOnBlur()\"\n          [attr.aria-required]=\"model.a11y_input_ariaRequired\"\n          [attr.aria-label]=\"model.a11y_input_ariaLabel\"\n          [attr.aria-labelledby]=\"model.a11y_input_ariaLabelledBy\"\n          [attr.aria-describedby]=\"model.a11y_input_ariaDescribedBy\"\n          [attr.aria-invalid]=\"model.a11y_input_ariaInvalid\"\n          [attr.aria-errormessage]=\"model.a11y_input_ariaErrormessage\"\n        />\n        <div [class]=\"model.getThumbContainerCss(i)\" [style]=\"{ left: model.getPercent(value) + '%' }\">\n          <div *ngIf=\"model.tooltipVisibility !== 'never'\" [class]=\"model.tooltipCss\">\n            <div [class]=\"model.cssClasses.tooltipPanel\">\n              <div [class]=\"model.cssClasses.tooltipValue\">{{model.getTooltipValue(i)}}</div>\n            </div>\n          </div>\n          <div [class]=\"model.cssClasses.thumb\">\n            <div [class]=\"model.cssClasses.thumbDot\"></div>\n          </div>\n        </div>\n      </ng-container>\n\n    </div>\n  </div>\n\n  <div *ngIf=\"model.showLabels\" [class]=\"model.cssClasses.labelsContainer\">\n    <div>\n      <ng-template *ngFor=\"let label of model.renderedLabels; index as i; trackBy: trackByLabelCount;\" [component]=\"{ name: 'sv-slider-label-item', data: {model: model, item: label }}\"></ng-template>\n    </div>\n  </div>\n</div>\n", directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.DynamicComponentDirective, selector: "[component]", inputs: ["component"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: SliderQuestionComponent, decorators: [{
            type: Component,
            args: [{
                    selector: "sv-ng-slider-question",
                    templateUrl: "./slider.component.html"
                }]
        }], propDecorators: { rangeInputRef: [{
                type: ViewChild,
                args: ["rangeInputRef"]
            }] } });
AngularComponentFactory.Instance.registerComponent("slider-question", SliderQuestionComponent);
//# sourceMappingURL=data:application/json;base64,