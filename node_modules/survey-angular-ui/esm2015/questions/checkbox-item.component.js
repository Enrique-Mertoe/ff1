import { Component, Input } from "@angular/core";
import * as i0 from "@angular/core";
export class CheckboxItemComponent {
    constructor() {
    }
    onChange(event) {
        this.question["clickItemHandler"](this.model, event.target.checked);
    }
    onSelectAllChange(event) {
        this.question.toggleSelectAll();
    }
}
CheckboxItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: CheckboxItemComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
CheckboxItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: CheckboxItemComponent, selector: "sv-ng-checkbox-item, '[sv-ng-checkbox-item]'", inputs: { question: "question", model: "model", ariaLabel: "ariaLabel" }, ngImport: i0, template: "<input type=\"checkbox\" [name]=\"question.name+model.id\" [id]=\"question.getItemId(model)\" [class]=\"question.cssClasses.itemControl\" [required]=\"question.hasRequiredError()\"\n  [disabled]=\"!question.getItemEnabled(model)\" [readonly]=\"question.isReadOnlyAttr\" [checked]=\"question.isItemSelected(model)\" [value]=\"model.value\" (change)=\"onChange($event)\" [attr.aria-label]=\"ariaLabel\"/>\n<ng-content></ng-content>", styles: [""] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: CheckboxItemComponent, decorators: [{
            type: Component,
            args: [{
                    selector: "sv-ng-checkbox-item, '[sv-ng-checkbox-item]'",
                    templateUrl: "./checkbox-item.component.html",
                    styleUrls: ["./checkbox-item.component.scss"]
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { question: [{
                type: Input
            }], model: [{
                type: Input
            }], ariaLabel: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3gtaXRlbS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcXVlc3Rpb25zL2NoZWNrYm94LWl0ZW0uY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vc3JjL3F1ZXN0aW9ucy9jaGVja2JveC1pdGVtLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQVFqRCxNQUFNLE9BQU8scUJBQXFCO0lBSWhDO0lBQ0EsQ0FBQztJQUNELFFBQVEsQ0FBQyxLQUFVO1FBQ2pCLElBQUksQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUNELGlCQUFpQixDQUFDLEtBQVU7UUFDMUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUNsQyxDQUFDOzttSEFYVSxxQkFBcUI7dUdBQXJCLHFCQUFxQiw4SkNSbEMsK2FBRXlCOzRGRE1aLHFCQUFxQjtrQkFMakMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsOENBQThDO29CQUN4RCxXQUFXLEVBQUUsZ0NBQWdDO29CQUM3QyxTQUFTLEVBQUUsQ0FBQyxnQ0FBZ0MsQ0FBQztpQkFDOUM7MEVBRVUsUUFBUTtzQkFBaEIsS0FBSztnQkFDRyxLQUFLO3NCQUFiLEtBQUs7Z0JBQ0csU0FBUztzQkFBakIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgSXRlbVZhbHVlLCBRdWVzdGlvbkNoZWNrYm94TW9kZWwgfSBmcm9tIFwic3VydmV5LWNvcmVcIjtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiBcInN2LW5nLWNoZWNrYm94LWl0ZW0sICdbc3YtbmctY2hlY2tib3gtaXRlbV0nXCIsXG4gIHRlbXBsYXRlVXJsOiBcIi4vY2hlY2tib3gtaXRlbS5jb21wb25lbnQuaHRtbFwiLFxuICBzdHlsZVVybHM6IFtcIi4vY2hlY2tib3gtaXRlbS5jb21wb25lbnQuc2Nzc1wiXVxufSlcbmV4cG9ydCBjbGFzcyBDaGVja2JveEl0ZW1Db21wb25lbnQge1xuICBASW5wdXQoKSBxdWVzdGlvbiE6IFF1ZXN0aW9uQ2hlY2tib3hNb2RlbDtcbiAgQElucHV0KCkgbW9kZWwhOiBJdGVtVmFsdWU7XG4gIEBJbnB1dCgpIGFyaWFMYWJlbD86IHN0cmluZztcbiAgY29uc3RydWN0b3IoKSB7XG4gIH1cbiAgb25DaGFuZ2UoZXZlbnQ6IGFueSkge1xuICAgIHRoaXMucXVlc3Rpb25bXCJjbGlja0l0ZW1IYW5kbGVyXCJdKHRoaXMubW9kZWwsIGV2ZW50LnRhcmdldC5jaGVja2VkKTtcbiAgfVxuICBvblNlbGVjdEFsbENoYW5nZShldmVudDogYW55KSB7XG4gICAgdGhpcy5xdWVzdGlvbi50b2dnbGVTZWxlY3RBbGwoKTtcbiAgfVxufVxuIiwiPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIFtuYW1lXT1cInF1ZXN0aW9uLm5hbWUrbW9kZWwuaWRcIiBbaWRdPVwicXVlc3Rpb24uZ2V0SXRlbUlkKG1vZGVsKVwiIFtjbGFzc109XCJxdWVzdGlvbi5jc3NDbGFzc2VzLml0ZW1Db250cm9sXCIgW3JlcXVpcmVkXT1cInF1ZXN0aW9uLmhhc1JlcXVpcmVkRXJyb3IoKVwiXG4gIFtkaXNhYmxlZF09XCIhcXVlc3Rpb24uZ2V0SXRlbUVuYWJsZWQobW9kZWwpXCIgW3JlYWRvbmx5XT1cInF1ZXN0aW9uLmlzUmVhZE9ubHlBdHRyXCIgW2NoZWNrZWRdPVwicXVlc3Rpb24uaXNJdGVtU2VsZWN0ZWQobW9kZWwpXCIgW3ZhbHVlXT1cIm1vZGVsLnZhbHVlXCIgKGNoYW5nZSk9XCJvbkNoYW5nZSgkZXZlbnQpXCIgW2F0dHIuYXJpYS1sYWJlbF09XCJhcmlhTGFiZWxcIi8+XG48bmctY29udGVudD48L25nLWNvbnRlbnQ+Il19